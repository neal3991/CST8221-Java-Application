/*  CST8221-JAP: HA#07
    File name: FileDialogDemo.java
*/
import java.io.*;
import java.awt.*;
import java.util.Scanner;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/** 
 * This class Demonstrates how to use the 
 * Swing FileChooser class to open and save files.
 * @author Sv. Ranev
 * @version 1.17.1
 * @see javax.swing.JFileChooser
 * @see javax.swing.filechooser.FileNameExtensionFilter
 */
public class FileDialogDemo extends JPanel implements ActionListener {
    
	private static final long serialVersionUID = -2775452287769568865L;
	/* class fields */
    private static final String newline = "\r\n";
    private JButton openButton; 
    private JButton saveButton;
    private JTextArea edit;
    private JFileChooser fileChooser;
    private JLabel status;
    
    /** Creates the GUI components and puts them in this panel. */
    public FileDialogDemo() {
        // Change the default layout
        super(new BorderLayout());

        //Create the editable text area
        edit = new JTextArea(20,30);
        edit.setMargin(new Insets(5,5,5,5));
        // add it to a scroll pane so that scroll bars can be used
        JScrollPane editScrollPane = new JScrollPane(edit);

        //Create a file chooser        
        fileChooser = new JFileChooser();
        // Make the current folder the default folder for open and save
        fileChooser.setCurrentDirectory(new File("."));
        // Create a file filters so that only Java and text files can be made visible
        FileFilter filter = new FileNameExtensionFilter("Text files (.txt)","txt");
        fileChooser.addChoosableFileFilter(filter);
        filter = new FileNameExtensionFilter("Java files (.java)","java");
        fileChooser.addChoosableFileFilter(filter);
        //set the file filter to display .java files only at start
        fileChooser.setFileFilter(filter);
        // Disable the All files filter option 
        fileChooser.setAcceptAllFileFilterUsed(false);
        
        /* The following lines allow you to try a different file selection modes. 
           The defauld mode is FILES_ONLY
        */
        //the line bellow allows directories to be selected only 
        //fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //the line bellow allows both files and directories to be selected. 
        //fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

        //Create the open button and add a listener
        openButton = new JButton("Open");
        openButton.addActionListener(this);

        //Create the save button add a listener 
        saveButton = new JButton("Save");
        saveButton.addActionListener(this);

        //Create a panel and place the buttons in the panel
        JPanel buttonPanel = new JPanel(); //use FlowLayout
        buttonPanel.add(openButton);
        buttonPanel.add(saveButton);
        //Create a status field using a label
        status = new JLabel();
        //Add all components to this panel
        add(buttonPanel, BorderLayout.PAGE_START);
        add(editScrollPane, BorderLayout.CENTER);
        add(status, BorderLayout.SOUTH);
    }// end constructor

    /** Handles the action events generated by the buttons */
    public void actionPerformed(ActionEvent e) {
        int returnOption = 0; // file dialog return value
        //Handle open button action event
        String ac = e.getActionCommand();
        if (ac.equals("Open")) {                     
            returnOption = fileChooser.showOpenDialog(null);
            //If the Open button of the file open dialog is pressed, load a file
            if (returnOption == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                //Load a file
                loadFile(file);
                status.setText("Status: File " +
                ((file != null && file.exists())? (file.getName() + " is open.") :" does not exist."));         
            } else {
                //display message if the operation was canceled 
                status.setText("Status: Open operation is cancelled.");
            }
            edit.setCaretPosition(0);

        //Handle save button action event
        } else if (e.getSource() == saveButton) {
            //show all files
            returnOption = fileChooser.showSaveDialog(FileDialogDemo.this);
            if (returnOption == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                //Save the file
                saveFile(file);
                status.setText("Status: File " +  file.getName() +" is saved");
                
            } else {
                 status.setText("Status: Save operation is cancelled.");
            }         
        }
    }
 /**
    * Loads the contents of a file into the text area.
    * @param file the file name
    */
   public void loadFile(File file) {
       edit.setText("");
      try {       
         Scanner in = new Scanner(new FileReader(file));
         while (in.hasNextLine())
            edit.append(in.nextLine() + newline);
         in.close();
      }
      catch (IOException e){
         status.setText("Status: Open operation unsuccessful.");;
      }
   } 

/**
    * Saves the contents of the text area into a file.
    * @param file the file name
    */
   public void saveFile(File file) {
    String text = edit.getText();
    //Print the text on the console
    //It is for testing purpose only.
    // GUI applications should not print on the console.
    //Comment the line below after testing.
    System.out.println(text);  
      try
      {
         FileWriter fr = new FileWriter(file);
         fr.write(text.toCharArray(),0,text.length());
         fr.close();
      }
      catch (IOException e)
      {
       status.setText("Status: Save operation unsuccessful.");
      }

   } 

    /**
     * Puts the GUI into a frame and makes it visible.
     * For thread safety, this method should be invoked from the
     * event dispatch thread.
     */
    private static void showGUI() {
        //Create and set up the application frame.
        JFrame frame = new JFrame("FileChooserDemo");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        //Set the content pane of the frame.
        frame.setContentPane(new FileDialogDemo());
//        frame.setSize(200,200);
         frame.pack();
        //Display the application GUI.
        frame.setVisible(true);
    }
    /** The main method - launch the application
     *  @param args command line arguments - not used
     */
    public static void main(String[] args) {
        //Schedule a job for the event dispatch thread:
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
               showGUI();
            }
        });
    }
}// end demo
